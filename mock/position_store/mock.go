// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moiot/gravity/pkg/position_store (interfaces: MySQLPositionStore,MongoPositionStore,MySQLTablePositionStore)

// Package mock_position_store is a generated GoMock package.
package mock_position_store

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/moiot/gravity/pkg/config"
	position_store "github.com/moiot/gravity/pkg/position_store"
	utils "github.com/moiot/gravity/pkg/utils"
	reflect "reflect"
)

// MockMySQLPositionStore is a mock of MySQLPositionStore interface
type MockMySQLPositionStore struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLPositionStoreMockRecorder
}

// MockMySQLPositionStoreMockRecorder is the mock recorder for MockMySQLPositionStore
type MockMySQLPositionStoreMockRecorder struct {
	mock *MockMySQLPositionStore
}

// NewMockMySQLPositionStore creates a new mock instance
func NewMockMySQLPositionStore(ctrl *gomock.Controller) *MockMySQLPositionStore {
	mock := &MockMySQLPositionStore{ctrl: ctrl}
	mock.recorder = &MockMySQLPositionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMySQLPositionStore) EXPECT() *MockMySQLPositionStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMySQLPositionStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMySQLPositionStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMySQLPositionStore)(nil).Close))
}

// FSync mocks base method
func (m *MockMySQLPositionStore) FSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FSync")
}

// FSync indicates an expected call of FSync
func (mr *MockMySQLPositionStoreMockRecorder) FSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FSync", reflect.TypeOf((*MockMySQLPositionStore)(nil).FSync))
}

// Get mocks base method
func (m *MockMySQLPositionStore) Get() utils.MySQLBinlogPosition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(utils.MySQLBinlogPosition)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockMySQLPositionStoreMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMySQLPositionStore)(nil).Get))
}

// Put mocks base method
func (m *MockMySQLPositionStore) Put(arg0 utils.MySQLBinlogPosition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put
func (mr *MockMySQLPositionStoreMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMySQLPositionStore)(nil).Put), arg0)
}

// Start mocks base method
func (m *MockMySQLPositionStore) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMySQLPositionStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMySQLPositionStore)(nil).Start))
}

// MockMongoPositionStore is a mock of MongoPositionStore interface
type MockMongoPositionStore struct {
	ctrl     *gomock.Controller
	recorder *MockMongoPositionStoreMockRecorder
}

// MockMongoPositionStoreMockRecorder is the mock recorder for MockMongoPositionStore
type MockMongoPositionStoreMockRecorder struct {
	mock *MockMongoPositionStore
}

// NewMockMongoPositionStore creates a new mock instance
func NewMockMongoPositionStore(ctrl *gomock.Controller) *MockMongoPositionStore {
	mock := &MockMongoPositionStore{ctrl: ctrl}
	mock.recorder = &MockMongoPositionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMongoPositionStore) EXPECT() *MockMongoPositionStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMongoPositionStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMongoPositionStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoPositionStore)(nil).Close))
}

// Get mocks base method
func (m *MockMongoPositionStore) Get() config.MongoPosition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(config.MongoPosition)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockMongoPositionStoreMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMongoPositionStore)(nil).Get))
}

// Put mocks base method
func (m *MockMongoPositionStore) Put(arg0 config.MongoPosition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put
func (mr *MockMongoPositionStoreMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMongoPositionStore)(nil).Put), arg0)
}

// Start mocks base method
func (m *MockMongoPositionStore) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMongoPositionStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMongoPositionStore)(nil).Start))
}

// MockMySQLTablePositionStore is a mock of MySQLTablePositionStore interface
type MockMySQLTablePositionStore struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLTablePositionStoreMockRecorder
}

// MockMySQLTablePositionStoreMockRecorder is the mock recorder for MockMySQLTablePositionStore
type MockMySQLTablePositionStoreMockRecorder struct {
	mock *MockMySQLTablePositionStore
}

// NewMockMySQLTablePositionStore creates a new mock instance
func NewMockMySQLTablePositionStore(ctrl *gomock.Controller) *MockMySQLTablePositionStore {
	mock := &MockMySQLTablePositionStore{ctrl: ctrl}
	mock.recorder = &MockMySQLTablePositionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMySQLTablePositionStore) EXPECT() *MockMySQLTablePositionStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMySQLTablePositionStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMySQLTablePositionStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).Close))
}

// GetCurrent mocks base method
func (m *MockMySQLTablePositionStore) GetCurrent(arg0 string) (position_store.MySQLTablePosition, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent", arg0)
	ret0, _ := ret[0].(position_store.MySQLTablePosition)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCurrent indicates an expected call of GetCurrent
func (mr *MockMySQLTablePositionStoreMockRecorder) GetCurrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).GetCurrent), arg0)
}

// GetMaxMin mocks base method
func (m *MockMySQLTablePositionStore) GetMaxMin(arg0 string) (position_store.MySQLTablePosition, position_store.MySQLTablePosition, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMin", arg0)
	ret0, _ := ret[0].(position_store.MySQLTablePosition)
	ret1, _ := ret[1].(position_store.MySQLTablePosition)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetMaxMin indicates an expected call of GetMaxMin
func (mr *MockMySQLTablePositionStoreMockRecorder) GetMaxMin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMin", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).GetMaxMin), arg0)
}

// GetStartBinlogPos mocks base method
func (m *MockMySQLTablePositionStore) GetStartBinlogPos() (utils.MySQLBinlogPosition, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartBinlogPos")
	ret0, _ := ret[0].(utils.MySQLBinlogPosition)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetStartBinlogPos indicates an expected call of GetStartBinlogPos
func (mr *MockMySQLTablePositionStoreMockRecorder) GetStartBinlogPos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartBinlogPos", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).GetStartBinlogPos))
}

// PutCurrent mocks base method
func (m *MockMySQLTablePositionStore) PutCurrent(arg0 string, arg1 position_store.MySQLTablePosition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCurrent", arg0, arg1)
}

// PutCurrent indicates an expected call of PutCurrent
func (mr *MockMySQLTablePositionStoreMockRecorder) PutCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCurrent", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).PutCurrent), arg0, arg1)
}

// PutMaxMin mocks base method
func (m *MockMySQLTablePositionStore) PutMaxMin(arg0 string, arg1, arg2 position_store.MySQLTablePosition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutMaxMin", arg0, arg1, arg2)
}

// PutMaxMin indicates an expected call of PutMaxMin
func (mr *MockMySQLTablePositionStoreMockRecorder) PutMaxMin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMaxMin", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).PutMaxMin), arg0, arg1, arg2)
}

// PutStartBinlogPos mocks base method
func (m *MockMySQLTablePositionStore) PutStartBinlogPos(arg0 utils.MySQLBinlogPosition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutStartBinlogPos", arg0)
}

// PutStartBinlogPos indicates an expected call of PutStartBinlogPos
func (mr *MockMySQLTablePositionStoreMockRecorder) PutStartBinlogPos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStartBinlogPos", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).PutStartBinlogPos), arg0)
}

// Start mocks base method
func (m *MockMySQLTablePositionStore) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMySQLTablePositionStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMySQLTablePositionStore)(nil).Start))
}
